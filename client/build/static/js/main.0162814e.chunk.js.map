{"version":3,"sources":["AskQuestion.js","Questions.js","PostAnswer.js","Answer.js","Question.js","App.js","index.js"],"names":["AskQuestion","props","state","question","updateQuestion","bind","e","this","setState","target","value","postQuestion","className","type","onChange","onClick","submit","Component","Questions","questions","map","item","key","_id","to","PostAnswer","answer","updateAnswer","postAnswer","placeholder","Answer","upVote","vote","Question","id","getQuestion","answers","isUpVote","App","API_URL","process","getQuestions","fetch","then","response","json","data","method","headers","body","JSON","stringify","find","questionID","answerID","upvote","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0162814e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './AskQuestion.css';\r\n\r\nclass AskQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question: ''\r\n        };\r\n\r\n        this.updateQuestion = this.updateQuestion.bind(this);\r\n    }\r\n\r\n    updateQuestion(e) {\r\n        this.setState({ question: e.target.value });\r\n    }\r\n\r\n    submit() {\r\n        this.props.postQuestion(this.state.question);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AskQuestion__input-wrapper\">\r\n                <input className=\"AskQuestion__input\" type=\"text\" onChange={this.updateQuestion}/>\r\n                <button className=\"AskQuestion__button\" onClick={() => this.submit()}>Submit</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AskQuestion;","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\nimport AskQuestion from './AskQuestion';\r\nimport './Questions.css';\r\n\r\nclass Questions extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"questions-wrapper\">\r\n                    <h1 className=\"Questions__h1\">Enter your question</h1>\r\n                    <AskQuestion postQuestion={(question) => this.props.postQuestion(question)}/>\r\n                    <ul className=\"Questions__ul\">\r\n                        {this.props.questions.map(function (item) {\r\n                            return <li className=\"Questions__li\" key={item._id}>\r\n                                <Link className=\"Questions__link\" to={`/question/${item._id}`}>{item.question}</Link>\r\n                            </li>\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Questions;","import React, {Component} from 'react';\r\nimport './PostAnswer.css';\r\n\r\nclass PostAnswer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            answer: ''\r\n        };\r\n\r\n        this.updateAnswer = this.updateAnswer.bind(this);\r\n    }\r\n\r\n    updateAnswer(e) {\r\n        this.setState({ answer: e.target.value });\r\n    }\r\n\r\n    submit() {\r\n        this.props.postAnswer(this.state.answer);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"PostAnswer__input-wrapper\">\r\n                <input className=\"PostAnswer__input\" placeholder=\"Write your answer here\" type=\"text\" onChange={this.updateAnswer}/>\r\n                <button className=\"PostAnswer__button\" onClick={() => this.submit()}>Submit</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostAnswer;","import React, {Component} from 'react';\r\nimport './Answer.css';\r\n\r\nclass Answer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Answer\">\r\n                <div className=\"Answer__vote-wrapper\">\r\n                        <span className=\"Answer__arrow-button-up\" onClick={() => this.props.upVote(true)}>â–²</span>\r\n                        <div className=\"Answer__vote-answer\">{this.props.answer.vote}</div>\r\n                        <span className=\"Answer__arrow-button-down\" onClick={() => this.props.upVote(false)}>â–¼</span>\r\n                </div>\r\n                <div className=\"Answer__answer-text-wrapper\">{this.props.answer.answer}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Answer;","import React, {Component} from 'react';\r\nimport PostAnswer from './PostAnswer';\r\nimport Answer from \"./Answer\";\r\nimport {Link} from \"@reach/router\";\r\nimport './Question.css';\r\n\r\nclass Question extends Component {\r\n    render() {\r\n        const id = this.props.id;\r\n        const question = this.props.getQuestion(id);\r\n\r\n        if (question) {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div>\r\n                        <Link className=\"Question__back-arrow\" to=\"/\">ðŸ¡¨</Link>\r\n                        <div className=\"Question__question-list-wrapper\">\r\n                            <h1 className=\"Question__h1\">{question.question}</h1>\r\n                            <PostAnswer postAnswer={(answer) => this.props.postAnswer(this.props.id, answer)}/>\r\n                            {\r\n                                question.answers.map((answer) => {\r\n                                    return <Answer key={answer._id}\r\n                                                   upVote={(isUpVote) => this.props.upVote(answer._id, isUpVote)}\r\n                                                   answer={answer}/>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div>Loading</div>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default Question;","import React, {Component} from 'react';\r\nimport Questions from './Questions';\r\nimport Question from './Question';\r\nimport './App.css';\r\nimport { Router } from \"@reach/router\";\r\n\r\nclass App extends Component {\r\n\r\n    API_URL = process.env.REACT_APP_API_URL;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            questions: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getQuestions();\r\n    }\r\n\r\n    getQuestions () {\r\n        fetch(`${this.API_URL}/questions`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                this.setState({questions: data});\r\n            });\r\n    }\r\n\r\n    postQuestion(question) {\r\n        fetch(`${this.API_URL}/questions`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({question})\r\n        })\r\n            .then(response => response.json())\r\n            .then(() => {\r\n                this.getQuestions();\r\n        });\r\n    }\r\n\r\n    getQuestion(id) {\r\n        const findFunction = question => question._id === id;\r\n        return this.state.questions.find(findFunction);\r\n    }\r\n\r\n    postAnswer(questionID, answer) {\r\n        fetch(`${this.API_URL}/answers`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                answer,\r\n                questionID\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(() => {\r\n                this.getQuestions();\r\n        });\r\n    }\r\n\r\n    upVote(answerID, isUpVote) {\r\n        fetch(`${this.API_URL}/vote`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                id: answerID,\r\n                upvote: isUpVote\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(() => {\r\n                this.getQuestions();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Questions\r\n                    path=\"/\"\r\n                    questions={this.state.questions}\r\n                    postQuestion={(question) => this.postQuestion(question)}/>\r\n                <Question\r\n                    path=\"/question/:id\"\r\n                    getQuestion={(id) => this.getQuestion(id)}\r\n                    postAnswer={(questionID, answer) => this.postAnswer(questionID, answer)}\r\n                    upVote={(answerID, isUpVote) => this.upVote(answerID, isUpVote)}/>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}